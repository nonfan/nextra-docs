{"/build-ins/bleed":{"title":"Bleed 组件","data":{"示例#示例":"使用<Bleed>包装您的内容时，它会比容器稍宽，并且会在两侧溢出。\n君子博学而日参省乎己，则知明而行无过矣。\n—— 荀子\n当您想要显示一些图形信息时，它提供了更好的阅读体验，这些信息通常在更大的尺寸下看起来更好。例如，您可以将文本、图像、视频或任何组件放入：\n您甚至可以使用<Bleed full>使其完全填充页面，除了侧边栏","用法#用法":"import {Bleed} from 'nextra-theme-docs';\n<Bleed>\n  <div\n    style={{\n      border: '1px solid #ccc',\n      height: '100px',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }}\n  >\n    <span>君子博学而日参省乎己，则知明而行无过矣。</span>\n    <span>—— 荀子</span>\n  </div>\n</Bleed>\n<Bleed full>\n  <Image src='/images/art.jpg'></Image>\n</Bleed>"}},"/build-ins/cards":{"title":"Cards 组件","data":{"示例#示例":"","用法#用法":"import { Cards, Card } from 'nextra/components';\nimport {\n  MessageOutlined,\n  ExclamationOutlined,\n  QuestionOutlined,\n} from '@ant-design/icons';\n<Cards>\n  <Card icon={<MessageOutlined />} title=\"Callout\" href=\"./callout\" />\n  <Card icon={<ExclamationOutlined />} title=\"Tabs\" href=\"./tabs\" />\n  <Card icon={<QuestionOutlined />} title=\"Steps\" href=\"./steps\" />\n</Cards>;"}},"/build-ins/callout":{"title":"Callout 组件","data":{"":"向读者显示重要信息的内置组件。","示例#示例":"标注是旨在吸引注意力的一小段文本\n标注是旨在吸引注意力的一小段文本\n标注是旨在吸引注意力的一小段文本\n标注是旨在吸引注意力的一小段文本","用法#用法":"","默认#默认":"使用emoji更改默认的图标\nSimpleLife在2023年9月3日翻译Nextra官网\nimport { Callout } from 'nextra/components';\n<Callout>SimpleLife在2023年9月3日翻译Nextra官网</Callout>;","信息#信息":"今天星期天\nimport { Callout } from 'nextra/components';\n<Callout type=\"info\">今天星期天</Callout>;","警告#警告":"这是一条警告信息，请查阅后使用该特性\nimport { Callout } from 'nextra/components';\n<Callout type=\"warning\">这是一条警告信息，请查阅后使用该特性</Callout>;","错误#错误":"这是一个危险的特征，可以导致一切爆炸\nimport { Callout } from 'nextra/components';\n<Callout type=\"error\">这是一个危险的特征，可以导致一切爆炸</Callout>;","api#API":"Callout组件需要以下属性","type可选#type(可选)":"Type: 'default' | 'info' | 'warning' | 'error'\nDefault: 'default'","emoji可选#emoji(可选)":"要在标注中显示的图标。您还可以使用此属性自定义图标。\nType: string | ReactNode\nDefault: '💡'","children#children":"标注的内容。\nType: ReactNode"}},"/build-ins/fileTree":{"title":"File Tree 组件","data":{"示例#示例":"","用法#用法":"import { FileTree } from 'nextra/components';\n<FileTree>\n  <FileTree.Folder name=\"pages\" defaultOpen>\n    <FileTree.File name=\"_meta.json\" />\n    <FileTree.File name=\"contact.md\" />\n    <FileTree.File name=\"index.mdx\" />\n    <FileTree.Folder name=\"about\">\n      <FileTree.File name=\"_meta.json\" />\n      <FileTree.File name=\"legal.md\" />\n      <FileTree.File name=\"index.mdx\" />\n    </FileTree.Folder>\n  </FileTree.Folder>\n</FileTree>;"}},"/build-ins/image":{"title":"Image 组件","data":{"示例#示例":"","用法#用法":"import Image from '@/components/Image';\n<Image src=\"/images/art.jpg\"></Image>;\n<Image src=\"https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//181224-161372954458d6.jpg\"></Image>;","api#API":"Image组件需要一下属性","width可选#width(可选)":"控制图片宽度，默认占满容器\nType: 'number'","height可选#height(可选)":"默认是图片的高度\nType: 'number'","src必选#src(必选)":"图片的地址，可使用public下的静态文件，请用/开始您的路径，否则会导致线上路径出错如果你需要使用远程地址如http://xxx, 可直接使用完整地址"}},"/build-ins/steps":{"title":"Steps 组件","data":{"":"将有序列表转换为步骤的可视化表示的内置组件。","示例#示例":"","安装#安装":"npm i next react react-dom nextra nextra-theme-docs\npnpm add next react react-dom nextra nextra-theme-docs\nyarn add next react react-dom nextra nextra-theme-docs\nbun add next react react-dom nextra nextra-theme-docs","添加-nextjs-配置#添加 Next.js 配置":"在项目的根目录中创建以下next.setting.js文件：\nconst withNextra = require('nextra')({\n  theme: 'nextra-theme-docs',\n  themeConfig: './theme.config.jsx',\n});\n// 如果你有其他 Next.js 配置，你可以将它们作为参数传递给 withNextra\nconst nextConfig = {};\nmodule.exports = withNextra(nextConfig);","创建文档主题配置#创建文档主题配置":"在项目的根目录中创建主题 theme.config.jsx 文件。\nexport default {\n  logo: <span>My Nextra Documentation</span>,\n  project: {\n    link: 'https://github.com/simplelife/nextra-template',\n  },\n  // ... 其他配置选项\n};","启动#启动":"现在，您可以将您的第一个 MDX 页面创建为page/index.mdx：\n# Welcome to SimpleLife\nHello, world!\n在package.json配置启动命令，使用npm run dev运行你的项目\n\"scripts\": {\n\"dev\": \"next dev\",\n},","用法#用法":"","step-1#Step 1":"步骤 1 的内容。","step-2#Step 2":"步骤 2 的内容。\nimport { Steps } from 'nextra/components';\n<Steps>### Step 1 步骤 1 的内容。 ### Step 2 步骤 2 的内容。</Steps>;"}},"/build-ins/tabs":{"title":"Tabs 组件","data":{"示例#示例":"pnpm: 速度快、节省磁盘空间的软件包管理器\nnpm 是 Node 包管理器\nYarn 是一个包管理器，同时也是项目管理器","用法#用法":"","默认#默认":"import { Tab, Tabs } from 'nextra/components';\n<Tabs items={['pnpm', 'npm', 'yarn']}>\n  <Tab>**pnpm**: 速度快、节省磁盘空间的软件包管理器</Tab>\n  <Tab>**npm** 是 Node 包管理器</Tab>\n  <Tab>**Yarn** 是一个包管理器，同时也是项目管理器</Tab>\n</Tabs>;","选定索引#选定索引":"您可以使用defaultIndex属性设置默认选项卡索引：\nimport { Tabs } from 'nextra/components';\n<Tabs items={['pnpm', 'npm', 'yarn']} defaultIndex=\"1\">\n  ...\n</Tabs>;\n如果你希望npm为默认选项卡，可设置defaultIndex=\"1\", 就像这样：\npnpm: 速度快、节省磁盘空间的软件包管理器\nnpm 是 Node 包管理器\nYarn 是一个包管理器，同时也是项目管理器"}},"/deploy":{"title":"部署","data":{"":"如果您并没有直接克隆 SimpleLife 项目，需要按照部署文档一步一步设置。其中比较基础的部署能力，如将项目上传到 Github 仓库，并不会提及。","github-actions#GitHub Actions":"希望您的Github项目是Public，不然你将无法免费使用GitHub Actions\nGitHub Actions 是一种工具，可让你在 GitHub 仓库中执行不同的自动化操作它允许你创建自定义工作流，你可以使用这些工作流来自动化开发过程，例如构建、测试和部署代码\nGitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的.github/workflows目录workflow 文件采用YAML格式, 文件名可以任意取, 但是后缀名统一为.yml, 比如config.yml一个库可以有多个 workflow 文件, GitHub 只要发现.github/workflows目录里面有 *.yml 文件, 就会自动运行该文件点击set up a workflow yourself创建 workflow\nname: Actions CI - Next.js version 12 static site export, GitHub Actions Build and Deploy\non:\n  push:\n    branches: [main]\n# 执行的一项或多项任务\njobs:\n  build-and-deploy:\n    # 运行在虚拟机环境ubuntu-latest\n    # https://docs.github.com/zh/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on\n    runs-on: ubuntu-latest\n    steps:\n      - name: 获取源码  🛎️\n        uses: actions/checkout@v3\n      - name: Node环境版本 🗜️\n        uses: actions/setup-node@v3\n        with:\n          node-version: 18\n      - name: 安装 Pnpm 🧬\n        uses: pnpm/action-setup@v2\n        id: pnpm-install\n        with:\n          version: 7\n          run_install: true\n      - name: 安装依赖 ⚙️\n        run: pnpm install\n      - name: 打包 🏗️\n        run: |\n          npm run build\n          touch out/.nojekyll\n      - name: 部署 🚀\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          branch: gh-pages\n          folder: out\n          clean: true\n点击Commit changes来创建改文件，然后actions就开始自动化运行了在配置workflow会出现一下问题，下面将带你一步步剖析问题和解决问题\n点击build-and-deploy查看错误日志","bug1#Bug1":"该报错表示未配置打包命令\n\"scripts\": {\n\"dev\": \"next dev\",\n\"build\": \"next build\"\n},","bug2#Bug2":"该报错表示找不到out文件夹，您需要配置打包后输出的静态文件，打包到out文件夹\nconst withNextra = require('nextra')({\ntheme: 'nextra-theme-docs',\nthemeConfig: './theme.config.jsx',\n});\nconst nextConfig = {\noutput: 'export',\n};\nmodule.exports = withNextra(nextConfig);","bug3#Bug3":"const nextConfig = {\noutput: 'export',\nimages: {\nunoptimized: true,\n},\n}","bug4#Bug4":"workflow permissions权限不足\n解决方案: 修改 workflow permissions权限 \n在 Settings > Actions > General 中 Workflow permissions\n进入Actions将失败workflow 重新就好了","github-pages#GitHub Pages":"GitHub Pages 必须在每个 repository 的基础上打开, 打开它时，您可以选择要服务的分支,将服务设置在.gh-pages分支在浏览器中, 打开 GitHub 里的项目 repository\n在 Settings > Pages > Source 中, 将 Branch 分支设定在.gh-pages并点击 Save 保存配置\n等待 actions 部署完 Pages，可以点击Visit site访问站点","nextjs#Next.js":"Next.js 的next/image、next/link和next/router指定路径是相对于 /的而 GitHub Pages 托管站点的 URL 为:https://<你的 github name>.github.io/<repository>如: https://beher0.github.io/SimpleDocs/\n所以 需要通过配置使 Next.js 得到 /<repository>有两个相关的配置选项: basePath 和 assetPrefix将 basePath 设置为 /<repository name> 将生成 GitHub Pages 可访问链接将 assetPrefix 设置为 /<repository name> 将生成 GitHub Pages 可访问图像根据开发环境和生成环境来区分路径，来保证路径的正确性\nconst repository = 'SimpleDocs';\nconst isProd = process.env.NODE_ENV === 'production';\nconst nextConfig = {\n  assetPrefix: isProd ? `/${repository}` : '',\n  basePath: isProd ? `/${repository}` : '',\n};","完整配置#完整配置":"const username = 'BeHer0';\nconst repository = 'SimpleDocs';\nmodule.exports = {\n  username,\n  repository,\n};\nconst { repository } = require('./src/config');\nconst path = require('path');\nconst isProd = process.env.NODE_ENV === 'production';\nconst withNextra = require('nextra')({\n  theme: 'nextra-theme-docs',\n  themeConfig: './theme.config.jsx',\n});\nconst nextConfig = {\n  assetPrefix: isProd ? `/${repository}` : '',\n  basePath: isProd ? `/${repository}` : '',\n  output: 'export',\n  images: {\n    unoptimized: true,\n  },\n  sassOptions: {\n    includePaths: [path.join(__dirname, 'styles')],\n  },\n  webpack: (config) => {\n    config.resolve.alias['@'] = path.resolve(__dirname);\n    return config;\n  },\n};\nmodule.exports = withNextra(nextConfig);","结束#结束":"将 NextJS 部署到 Github Actions 也就是这么回事了，如果你需要部署到 Gitee 上，只需要去同步仓库就 Ok 了"}},"/":{"title":"Nextra框架","data":{"":"Nextra 是基于 Next.js 开发的一个主题框架，可让您构建以内容为中心的网站。它具有 Next.js 的所有强大功能。我只做一件事情，将Nextra使用中文的形式搭建文档主题网站，让更多的人可以搭建属于自己的文档网站。"}},"/theme/configuration":{"title":"主题配置","data":{"":"该主题使用theme.config.jsx文件配置。它应该导出一个包含您的配置的对象，例如：\nexport default {\n  project: {\n    link: 'https://github.com/SimpleLifecst/nextra-template',\n  },\n  logo: <strong>SimpleLife</strong>,\n};\n下面列出了每个选项的详细信息。","全局配置#全局配置":"","文档存储库githubgitee-仓库#文档存储库(github/gitee 仓库)":"设置文档仓库 URL。它用于生成问题？给我反馈链接和在 GitHub 上编辑此页面链接。\n属性\t类型\t详情\tdocsRepositoryBase\tstring\t存储库地址","指定路径#指定路径":"如果您的文档为子文件夹或存储库的不同分支中，您可以简单地将docsRepositoryBase设置为文档页面/文件夹的根路径。例如：\nexport default {\n  docsRepositoryBase:\n    'https://github.com/SimpleLifecst/nextra-template/tree/main/',\n};\n当点击如下链接，会在自动拼接上正确的路径","搜索引擎优化#搜索引擎优化":"您可以通过 useNextSeoProps 选项配置 SEO 相关设置。useNextSeoProps 函数返回将传递给 Next SEO 组件的道具。它也是一个钩子，因此您可以在里面使用像useRouter这样的 API 来有条件地返回值。\n属性\t类型\t详情\tuseNextSeoProps\t() => NextSeoProps\t返回Next SEO选项的React钩子函数。\t\n例如，我们可以让所有的页面显示相同后缀的标题\nexport default {\n  useNextSeoProps() {\n    return {\n      titleTemplate: '%s – SimpleLife',\n    };\n  },\n};\n这个%s是一个占位符，它会替换我们页面的标题您也可以有条件地返回它，以避免在主页上添加后缀：\nexport default {\n  useNextSeoProps() {\n    const { asPath } = useRouter();\n    if (asPath !== '/') {\n      return {\n        titleTemplate: '%s – SimpleLife',\n      };\n    }\n  },\n};","head-标签#Head 标签":"配置网站的<head>标签。您可以添加元标签、标题、网站图标等。\n属性\t类型\t详情\thead\tReact.ReactNode | React.FC\t将组件内容渲染到 <head> 标签内。\t\n使用head属性添加网站图标不稳定，刷新页面图标就加载不出了，谨慎使用","静态标签#静态标签":"如果你只有静态的头部标签，很容易直接把它们放在``内。例如：\nexport default {\n  head: (\n    <>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta property=\"og:title\" content=\"SimpleLife\" />\n      <meta property=\"og:description\" content=\"This website is SimpleLife\" />\n    </>\n  ),\n};","动态标签#动态标签":"您还可以使用函数组件作为head，根据当前页面的前提动态生成head 标签。例如：\nimport { useRouter } from 'next/router';\nimport { useConfig } from 'nextra-theme-docs';\nexport default {\n  head: () => {\n    const { asPath, defaultLocale, locale } = useRouter();\n    const { frontMatter } = useConfig();\n    const url =\n      'https://my-app.com' +\n      (defaultLocale === locale ? asPath : `/${locale}${asPath}`);\n    return (\n      <>\n        <meta property=\"og:url\" content={url} />\n        <meta property=\"og:title\" content={frontMatter.title || 'SimpleLife'} />\n        <meta\n          property=\"og:description\"\n          content={frontMatter.description || 'This website is SimpleLife'}\n        />\n      </>\n    );\n  },\n};\n关于 useConfig API 部分待Nextra出更详细的文档","黑暗模式和主题#黑暗模式和主题":"自定义网站的主题内容。\n属性\t类型\t详情\tdarkMode\tboolean\t显示或隐藏黑暗模式状态开关按钮。\tnextThemes\tobject\tnext-themes 主题的配置","主题色#主题色":"您可以通过将主色调值设置为深色或浅色主题来调整网站的主题颜色。\n属性\t类型\t详情\tprimaryHue\tnumber  | { dark: number; light: number }\t主题色的色调\t\nexport default {\n  primaryHue: 0,\n};\nexport default {\n  primaryHue: {\n    dark: 0,\n    light: 150,\n  },\n};","导航栏#导航栏":"","网站徽标#网站徽标":"导航栏最左侧显示的网站徽标。它可以是 React 节点或函数组件。\n属性\t类型\t详情\tlogo\tReact.ReactNode | React.FC\t网站的徽标\tlogoLink\tboolean | string\t默认是项目首页，可以使用true/false关闭链接，也可以更改为其他跳转路径\t\n设计一个 Logo 组件，更有利于维护自己的 logo 哦\nexport default {\n  logo: Logo,\n  logoLink: false,\n};","项目链接#项目链接":"在导航栏上最右侧显示一个链接到您的项目主页的按钮。默认情况下，它链接到 SimpleLife 的 GitHub 存储库。\n属性\t类型\t详情\tproject.link\tstring\t项目主页的URL\tproject.icon\tReact.ReactNode | React.FC\t链接图标，默认Github图标\t\n您可以配置project.link和project. icon来自定义项目链接，例如使其链接到您的 GitLab 存储库：\nexport default {\n  project: {\n    link: 'https://gitlab.com/inkscape/inkscape',\n    icon: (\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 256 256\">\n        <path\n          fill=\"currentColor\"\n          d=\"m231.9 169.8l-94.8 65.6a15.7 15.7 0 0 1-18.2 0l-94.8-65.6a16.1 16.1 0 0 1-6.4-17.3L45 50a12 12 0 0 1 22.9-1.1L88.5 104h79l20.6-55.1A12 12 0 0 1 211 50l27.3 102.5a16.1 16.1 0 0 1-6.4 17.3Z\"\n        ></path>\n      </svg>\n    ),\n  },\n};","聊天链接#聊天链接":"在导航栏右侧上显示一个链接到项目论坛或其他社交媒体的按钮。\n属性\t类型\t详情\tchat.link\tstring\t聊天链接的URL\tchat.icon\tReact.ReactNode | React.FC\t链接图标，默认图标是Discord\t\n您可以配置chat.link和chat.icon来自定义聊天链接，例如将其链接到您的 Twitter 帐户：\nexport default {\n  chat: {\n    link: 'https://twitter.com/SimpleLife',\n    icon: (\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 248 204\">\n        <path\n          fill=\"currentColor\"\n          d=\"M221.95 51.29c.15 2.17.15 4.34.15 6.53 0 66.73-50.8 143.69-143.69 143.69v-.04c-27.44.04-54.31-7.82-77.41-22.64 3.99.48 8 .72 12.02.73 22.74.02 44.83-7.61 62.72-21.66-21.61-.41-40.56-14.5-47.18-35.07a50.338 50.338 0 0 0 22.8-.87C27.8 117.2 10.85 96.5 10.85 72.46v-.64a50.18 50.18 0 0 0 22.92 6.32C11.58 63.31 4.74 33.79 18.14 10.71a143.333 143.333 0 0 0 104.08 52.76 50.532 50.532 0 0 1 14.61-48.25c20.34-19.12 52.33-18.14 71.45 2.19 11.31-2.23 22.15-6.38 32.07-12.26a50.69 50.69 0 0 1-22.2 27.93c10.01-1.18 19.79-3.86 29-7.95a102.594 102.594 0 0 1-25.2 26.16z\"\n        />\n      </svg>\n    ),\n  },\n};","搜索栏#搜索栏":"在导航栏右侧有一个搜索栏，默认效果是全英文，需要通过配置更改\n属性\t类型\t详情\tsearch.component\tReact.ReactNode | React.FC<{ className?: string, directories: Item[]}>\t搜索栏组件，可重写搜索栏\tsearch.emptyResult\tReact.ReactNode | React.FC\t搜索无内容提示信息\tsearch.loading\tReact.ReactNode | React.FC\t搜索加载中提示信息\tsearch.error\tstring | (() => string)\t搜索错误提示信息\tsearch.placeholder\tstring | (() => string)\t搜索栏占位内容\t\nexport default {\n  search: {\n    emptyResult: '找不到结果',\n    loading: '加载中',\n    error: '搜索错误',\n    placeholder: '搜索',\n  },\n};","横幅#横幅":"在网站顶部显示横幅。它可以用来显示警告或通知。","横幅组件选项#横幅组件选项":"属性\t类型\t详情\tbanner.dismissible\tboolean\t是否显示关闭横幅按钮\tbanner.key\tstring\t存储key以保持横幅状态（关闭或打开)\tbanner.text\tReact.ReactNode | React.FC\t横幅内容\t\n{\n  true,\n  text: (\n    <a\n      href='https://github.com/SimpleLifecst/nextra-template'\n      target='_blank'\n    >\n      🎉 查看SimpleLife GitHub仓库.\n    </a>\n  )\n}","banner-key#Banner key":"横幅可以被关闭。默认情况下，banner.key是nextra-banner，会存储在localStorage使用它来保持横幅状态（关闭或不关闭）在客户端上。可以自定义key值，通过改变 key 来改变横幅的状态：1打开、0关闭\nexport default {\n  banner: {\n    key: 'SimpleLife',\n    text: <a>…………</a>,\n  },\n};\n目前我没有很好的办法，来实现动态的打开和关闭，都需要刷新页面才能响应，这与黑暗主题的切换完全不一样","自定义导航栏#自定义导航栏":"自定义整个导航栏组件。\n属性\t类型\t详情\tnavbar.component\tReact.ReactNode | React.FC<NavBarProps>\t导航栏组件\tnavbar.extraContent\tReact.ReactNode | React.FC\t在最右侧最后一个图标后显示额外的内容。\t\n如果你觉得当前的导航条不是很满意，完全可以自定义。使用extraContent可以添加一个额外的按钮，例如反馈按钮：\nimport Navbar from '@/components/Navbar';\nimport Feedback from '@/components/Feedback';\nexport default {\n  navbar: {\n    component: Navbar,\n    extraContent: Feedback,\n  },\n};","侧边栏#侧边栏":"属性\t类型\t详情\tsidebar.defaultMenuCollapseLevel\tnumber\t指定左侧菜单默认折叠的文件夹级别。默认为2。\tsidebar.autoCollapse\tboolean\t如果为true，则自动折叠defaultMenuCollapseLevel上方的非活动文件夹。\tsidebar.titleComponent\tReact.ReactNode | React.FC<{type: string;title: string;route: string;}>\t自定义渲染侧边栏标题的组件。\tsidebar.toggleButton\tboolean\t隐藏/显示侧边栏状态开关按钮。默认隐藏。","菜单折叠级别#菜单折叠级别":"侧边栏菜单默认在 2 级折叠，可以通过设置侧边栏进行更改，defaultMenuCollapseLevel不同的数字，例如设置为 1 时，每个文件夹默认折叠，设置为Infinity时，默认展开所有嵌套文件夹。如果sibar.autoCollapse设置为 true，则所有不包含活动 / 集中路由的文件夹将自动折叠到sibar.defaultMenuCollapseLevel设置的级别。例如，如果defaultMenuCollapseLevel为 2，则顶级文件夹不会自动折叠。","自定义侧边栏标题#自定义侧边栏标题":"与Separators一起，您可以使用sibar.titleComponent属性来自定义侧边栏内容的呈现方式：\nexport default {\nsidebar:{\ntitleComponent({title, type}) {\nif (type === 'separator') {\nreturn (\n<div style={{background: 'cyan', textAlign: 'center'}}>{title}</div>\n);\n}\nreturn <>{title}</>\n},\n},\n};\n{\n  \"*\": {\n  \"theme\": {\n  \"breadcrumb\": false\n}\n},\n  \"index\": {\n  \"title\": \"介绍\"\n},\n  \"theme\": {\n  \"title\": \"文档主题\",\n  \"theme\": {\n  \"breadcrumb\": true\n}\n},\n  \"build-ins\": {\n  \"title\": \"内置组件\",\n  \"theme\": {\n  \"breadcrumb\": true\n}\n},\n  \"deploy\": \"部署Action自动化\",\n  \"zero-configuration\": \"快速上手\"\n}","内容#内容":"","mdx-组件#MDX 组件":"提供自定义 MDX 组件中的元素来渲染内容。例如，您可以使用自定义pre来渲染代码块。\n属性\t类型\t详情\tcomponents\tRecord<string, React.FC>\t自定义MDX组件\t\nimport Code from '@/components/Code';\nexport default {\n  components: {\n    pre: Code,\n  },\n};\ncomponents属性是一个对象，使用键值对的形式，键必须是规定的元素，请查看MDX components","书写方向#书写方向":"网站的默认书写方向。\n属性\t类型\t详情\tdirection\tltr | rtl\t书写方向\t\nexport default {\n  direction: 'rtl',\n};","主要内容#主要内容":"渲染页面主要区域的顶部或底部内容。它可用于渲染评论部分、时事通讯表单或任何其他类型的内容。\n属性\t类型\t详情\tmain\tReact.FC<{ children: React.ReactNode }>\t主要内容组件\t\nimport MainComponent from '@/components/MainComponent';\nexport default {\n  main: MainComponent,\n};\n如果你需要在文章底部添加一个评论区，可将您的组件，放置在children下面\nexport default function MainComponent({ children }) {\n  return (\n    <>\n      <div>{children}</div>\n      <div>评论区</div>\n    </>\n  );\n}","目录侧边栏#目录侧边栏":"","目录#目录":"在页面右侧显示目录。它对于在标题之间导航很有用。","目录侧边栏-1#目录侧边栏":"属性\t类型\t详情\ttoc.component\tReact.ReactNode | React.FC<TOCProps>\t自定义渲染目录组件\ttoc.extraContent\tReact.ReactNode | React.FC\t在目录下面显示额外的内容\ttoc.float\tboolean\t将目录浮动到内容旁边。\ttoc.title\tReact.ReactNode | React.FC\t目录标题，默认显示\"On This Page\"\ttoc.headingComponent\tReact.FC<{ id: string, children: string }>\t目录标题的自定义渲染器。\ttoc.backToTop\tboolean\t添加Scroll to top滚动到顶部的链接\t\nexport default {\n  toc: {\n    title: '目录',\n    backToTop: true,\n    float: true,\n  },\n};","浮动目录#浮动目录":"toc.float默认启用，开启后，目录会显示在页面右侧，滚动时会跟随，如果禁用，目录会直接显示在页面侧边栏。","编辑链接#编辑链接":"在指向 GitHub（或其他位置）上的文件 URL 的页面上显示Edit this page链接。\n属性\t类型\t详情\teditLink.text\tReact.ReactNode | React.FC\t默认编辑链接的显示内容，如 “Edit this page”\teditLink.component\tReact.FC<{children: React.ReactNode;className?: string;filePath?: string;}>\t定制的编辑链接组件。","反馈链接#反馈链接":"内置反馈链接为用户提供了一种提交留档反馈的方式。默认情况下，它是一个指向文档存储库问题创建表单的链接，使用当前网站标题预填充 issue 标题\n属性\t类型\t详情\tfeedback.content\tReact.ReactNode | React.FC\t反馈按钮的内容\tfeedback.labels\tstring\t可以添加到新创建的 GitHub issue 中的标签\tfeedback.useLink\t() => string\t默认情况下，自定义链接将在“docsRepositoryBase”中设置的存储库中打开一个问题。\t\n要想禁用它，你可以设置feedback.content为null","页尾#页尾":"","分页导航#分页导航":"在内容底部显示上一页和下一页链接。这对于在页面之间导航很有用。\n属性\t类型\t详情\tnavigation\tboolean | object\t启用或禁用导航链接。\tnavigation.prev\tboolean\t启用或禁用上一页链接。\tnavigation.next\tboolean\t启用或禁用下一页链接。\t\nexport default {\n  navigation: {\n    prev: true,\n    next: true,\n  },\n};\n配置navigation: true效果和上面等同","最后更新日期#最后更新日期":"显示每个页面的最后更新日期。这对于显示内容的新鲜度很有用。\n属性\t类型\t详情\tgitTimestamp\tReact.ReactNode | React.FC<{ timestamp: Date }>\t组件渲染最近更新的信息\t\nexport default {\n  gitTimestamp: LastUpdateDate,\n};\nimport dayjs from 'dayjs';\nfunction LastUpdateDate({ timestamp }) {\n  return '最后更新于 ' + dayjs(timestamp).format('YYYY年M月D日');\n}\nexport default LastUpdateDate;","尾部#尾部":"网站的尾部区域。您可以为默认尾部指定一些内容，也可以使用自定义组件对其进行完全自定义\n属性\t类型\t详情\tfooter.text\tReact.ReactNode | React.FC\t默认页脚组件的内容\tfooter.component\tReact.ReactNode | React.FC<{ menu: boolean }>\t自定义的页脚组件","版权信息#版权信息":"export default {\n  footer: {\n    text: (\n      <span>\n        Copyright {new Date().getFullYear()} © <span>SimpleLife</span>.\n      </span>\n    ),\n  },\n};","主题模式切换#主题模式切换":"可切换黑夜模式\n属性\t类型\t详情\tthemeSwitch.component\tReact.ReactNode | React.FC<{ lite?: boolean, className?: string }>\t渲染主题切换功能的组件。\tthemeSwitch.useOptions\tThemeOptions | () => ThemeOptions\t主题切换中的选项","选项#选项":"您可以为本地语言自定义选项名称：\nexport default {\n  themeSwitch: {\n    useOptions() {\n      return {\n        light: '白天',\n        dark: '黑夜',\n        system: '系统',\n      };\n    },\n  },\n};","favicon-图标实验性#Favicon 图标(实验性)":"并非所有浏览器都支持此功能，但这是一种只需使用表情符号或字符来自定义网站图标的好方法。\n属性\t类型\t详情\tfaviconGlyph\tstring\t用作网站显示的图标。\t\n该功能有些bug，并保存图标的稳定性"}},"/theme/started":{"title":"创建一个新项目","data":{"安装#安装":"npm i next react react-dom nextra nextra-theme-docs\npnpm add next react react-dom nextra nextra-theme-docs\nyarn add next react react-dom nextra nextra-theme-docs\nbun add next react react-dom nextra nextra-theme-docs","添加-nextjs-配置#添加 Next.js 配置":"在项目的根目录中创建以下next.setting.js文件：\nconst withNextra = require('nextra')({\n  theme: 'nextra-theme-docs',\n  themeConfig: './theme.config.jsx',\n});\n// 如果你有其他 Next.js 配置，你可以将它们作为参数传递给 withNextra\nconst nextConfig = {};\nmodule.exports = withNextra(nextConfig);","创建文档主题配置#创建文档主题配置":"在项目的根目录中创建主题 theme.config.jsx 文件。\nexport default {\n  logo: <span>My Nextra Documentation</span>,\n  project: {\n    link: 'https://github.com/simplelife/nextra-template',\n  },\n  // ... 其他配置选项\n};","启动#启动":"现在，您可以将您的第一个 MDX 页面创建为page/index.mdx：\n# Welcome to SimpleLife\nHello, world!\n在package.json配置启动命令，使用npm run dev运行你的项目\n\"scripts\": {\n\"dev\": \"next dev\",\n},"}},"/theme/page":{"title":"页面配置","data":{"":"在 Nextra 中，可以通过配置_meta.json文件来配置站点和页面结构。在文档主题中，有一些额外的选项可用于进一步自定义它。这些配置会影响主题的整体布局，尤其是导航栏和侧边栏。","页面#页面":"在pages文件下创建以.mdx后缀的文件，它是可以书写 markdown 语法和js语法侧边栏中显示的页面标题和顺序应在_meta.json文件中配置为键值对。例如，如果您有以下文件结构：\n您可以通过_meta.json文件定义页面在侧边栏中的显示方式\n{\n  \"index\": \"首页\",\n  \"contact\": \"联系我们\",\n  \"about\": \"关于\"\n}","文件夹#文件夹":"文件夹的配置方式与页面相同。例如：\n顶级_meta.json文件包含顶级页面和文件夹的元元素（导航栏名称）：\n{\n  \"index\": \"首页\",\n  \"contact\": \"联系我们\",\n  \"about\": \"关于\"\n  \"fruits\": \"水果\"\n}\n同理，嵌套的_meta.json文件包含同一文件夹中页面的元信息：\n{\n  \"apple\": \"苹果\",\n  \"banana\": \"香蕉\"\n}\n这样，页面的信息就被分组到目录中。您可以移动目录而无需更改_meta.json 文件。","外部链接#外部链接":"在导航菜单中添加外部链接，通过设置_meta.json中的href属性\n{\n  \"github_link\": {\n    \"title\": \"SimpleLife\", // 设置菜单名\n    \"href\": \"https://github.com/SimpleLifecst/nextra-template\"\n  }\n}\n要始终在新窗口中打开链接，请启用newWindow:true选项：\n{\n  \"github_link\": {\n    \"title\": \"SimpleLife\",\n    \"href\": \"https://github.com/SimpleLifecst/nextra-template\",\n    \"newWindow\": true\n  }\n}","隐藏菜单#隐藏菜单":"默认情况下，pages下的 MDX 文件页面都将显示在菜单栏上，如果你需要隐藏一个特殊的菜单，你可以在_meta.json设置\"display\":\"hidden\"\n{\n  \"index\": \"首页\",\n  \"contact\": {\n    \"display\": \"hidden\"\n  },\n  \"about\": \"关于\"\n}\n该页面仍然可以通过/contactURL 访问，但不会显示在侧边栏中。","导航栏#导航栏":"","子文档#子文档":"配置_meta.json中\"type\":\"page\"属性，它将在导航栏上显示为特殊页面，而不是侧边栏。使用此功能，您可以拥有多个“子文档”，以及始终可见的特殊页面或链接，例如“关于”。在您的顶级_meta.json文件中，您可以将所有内容设置为页面，而不是普通的侧边栏项目：\n{\n  \"index\": {\n    \"title\": \"Home\",\n    \"type\": \"page\"\n  },\n  \"about\": {\n    \"title\": \"About\",\n    \"type\": \"page\"\n  }\n}\n它的效果像这样：","菜单#菜单":"配置\"type\":\"menu\"设置为菜单，通过配置items来添加到导航栏的子项中 ：\n{\n  \"company\": {\n    \"title\": \"Company\",\n    \"type\": \"menu\",\n    \"items\": {\n      \"about\": \"关于\"\n      \"contact\": \"联系我们\"\n    }\n  }\n}","链接#链接":"与外部链接配置相同，您也可以在导航栏中配置外部链接：\n{\n  \"contact\": {\n    \"title\": \"Contact Us\",\n    \"type\": \"page\",\n    \"href\": \"https://example.com/contact\",\n    \"newWindow\": true\n  }\n}","后备预案#后备预案":"在上面的子文档示例中，我们必须为每个页面定义\"type\":\"page\"选项。为了方便起见，您可以使用*键来定义此文件夹中所有项目的后备配置：\n{\n  \"*\": {\n    \"type\": \"page\"\n  },\n  \"index\": \"首页\",\n  \"about\": \"关于\"\n}\n当所有项目都设置了\"type\":\"page\"时，它们是等效的。","分隔符#分隔符":"您可以使用占位符\"type\":\"separator\"在侧边栏菜单之间创建分隔线：\n{\n  \"index\": \"首页\",\n  \"---\": {\n    \"type\": \"separator\"\n  },\n  \"about\": \"关于\"\n}","高级#高级":"","主题组件#主题组件":"您可以使用theme属性为每个页面配置主题。例如，您可以禁用或启用特定页面的特定组件：\nbreadcrumb页面面包屑、footer底部版权信息、sidebar侧边栏、toc右侧目录、pagination翻页功能\n{\n  \"index\": {\n    \"title\": \"首页\",\n    \"theme\": {\n      \"breadcrumb\": false,\n      \"footer\": false,\n      \"sidebar\": false,\n      \"toc\": true,\n      \"pagination\": false\n    }\n  }\n}\n如果设置的是文件夹，所有子页面都将继承此属性。","布局#布局":"默认情况下，每个页面在其主题配置中都有\"layout\":\"default\"这是默认行为。","原始布局#原始布局":"默认情况下，Nextra 会为 MDX 内容提供样式（如 h1、h2、h3 等），设置布局\"layout\":\"raw\"，您可以使用最原始的布局，Nextra 不会额外注入样式，这样您可以更好的设计页面。\n{\n  \"index\": {\n    \"title\": \"首页\",\n    \"theme\": {\n      \"layout\": \"raw\"\n    }\n  }\n}","完全布局#完全布局":"您可能希望渲染一些具有完全容器宽度和高度的页面（将去掉目录右侧栏），这将但保留所有其他样式。您可以配置\"layout\":\"full\"来做到这一点：\n{\n  \"index\": {\n    \"title\": \"首页\",\n    \"theme\": {\n      \"layout\": \"full\"\n    }\n  }\n}","排版#排版":"typesetting控制排版细节，如字体特征、标题样式以及li和code等组件。文档主题中有default和article两种排版。默认值适用于大多数情况，如留档，但您可以使用article排版使其看起来像一个优雅的文章页面：\n{\n  \"about\": {\n    \"title\": \"关于\",\n    \"theme\": {\n      \"typesetting\": \"article\"\n    }\n  }\n}"}},"/zero-configuration":{"title":"快速上手","data":{"":"以极简的方式，让你零配置上手 Nextra 文档主题，以避免复杂的配置","克隆项目#克隆项目":"git clone https://github.com/agoodbook/nextra-docs.git","安装依赖#安装依赖":"请确保您的NodeJS环境版本在v16.20.2及以上。\nnpm install\nyarn add","介绍项目目录#介绍项目目录":"","public#public":"存放静态文件，如图片、音频等","src#src":"","components#components":"存放公共组件，如有我自定义的Image组件和Table组件","pages#pages":"存放文档页面","settingjs#setting.js":"公共配置，请配置您的Github用户名和仓库地址\nconst username = 'BeHer0';\nconst repository = 'SimpleDocs';\nmodule.exports = {\n  username,\n  repository,\n};","globalstylescss#globalStyle.scss":"全局的css样式文件\n.light白天主题样式\n.dark黑夜主题模式"}}}